This program an infix expression, convert it to postfix, evaluate the postfix and print the answer to standard output.  
 
For this project, the infix and postfix operands are restricted to single decimal digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. Operators: +, -, *, /,  ^, which denote addition, subtraction, multiplication, integer division and exponentiation, respectively. 

Suppose we have a pocket calculator and would like to compute the cost of a shopping trip. To do so, we add a list of numbers and multiply the result by 1.06; this computes the purchase price of some items with local sales tax added. If the items are 4.99, 5.99, and 6.99, then a natural way to enter this would be the sequence 4.99+5.99+6.99*1.06=. Depending on the calculator, this produces either the intended answer, 19.05, or the scientific answer, 18.39. Most simple four-function calculators will give the first answer, but many advanced calculators know that multiplication has higher precedence than addition. On the other hand, some items are taxable and some are not, so if only the first and last items were actually taxable, then the sequence 4.99*1.06+5.99+6.99*1.06= would give the correct answer (18.69) on a scientific calculator and the wrong answer (19.37) on a simple calculator. A scientific calculator generally comes with parentheses, so we can always get the right answer by parenthesizing, but with a simple calculator we need to remember intermediate results. A typical evaluation sequence for this example might be to multiply 4.99 and 1.06, saving this answer as A1. We then add 5.99 and A1, saving the result in A1. We multiply 6.99 and 1.06, saving the answer in A2, and finish by adding A1 and A2, leaving the final answer in A1. We can write this sequence of operations as follows: 4.99 1.06 * 5.99 + 6.99 1.06 * +. 
 